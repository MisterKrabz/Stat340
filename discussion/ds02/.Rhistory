#order matters, if you switch the order of the data, you must switch the alternative as well
t.test(groupf, groupm, alternative = "greater")
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE, error = TRUE,
fig.height = 3)
library(tidyverse)
leave <- read_csv("../../data/parental_leave.csv")
# Remove spaces from column names
names(leave) <- make.names(names(leave))
# Tidy numeric columns
leave <- leave %>%
mutate_at(vars(Paid.Maternity.Leave, Unpaid.Maternity.Leave,
Paid.Paternity.Leave, Unpaid.Paternity.Leave), as.numeric) %>%
replace(is.na(.), 0)
leave
leave_modified <- leave %>%
mutate(total_paid_leave = Paid.Maternity.Leave + Paid.Paternity.Leave) %>%
filter(Industry == "Educational Services: College & Universities")
ggplot(data = leave_modified, mapping = aes(x = total_paid_leave)) +
geom_histogram()
leave_modified # chart for reference
point_estimate <- mean(leave_modified$total_paid_leave)
standard_error <- sd(leave_modified$total_paid_leave)/sqrt(52)
critical_value <- qt(.98 + (1-.98)/2, df = 52 - 1)
point_estimate + c(-1,1) * critical_value * standard_error
mean <- mean(leave_modified$total_paid_leave)
mean
standard_error <- sd(leave_modified$total_paid_leave)/sqrt(52)
standard_error
test_stat = (mean - 10)/(standard_error)
test_stat
p_val <- 1 - pt(test_stat, df = 52-1)
p_val
t.test(leave_modified$total_paid_leave, mu = 10, alternative = "greater", conf.level = .98)
p_val <- 1 - pnorm(test_stat)
p_val
leave_modified1 <- leave %>%
mutate(total_paid_leave = Paid.Maternity.Leave + Paid.Paternity.Leave) %>%
filter(Industry == "Healthcare: Hospitals & Clinics")
leave_modified1
ggplot(data = leave_modified, mapping = aes(x = total_paid_leave)) +
geom_histogram()
point_estimate <- mean(leave_modified$total_paid_leave) - mean(leave_modified1$total_paid_leave)
standard_error <- sqrt(sd(leave_modified1$total_paid_leave)^2/38 + sd(leave_modified$total_paid_leave)^2/52)
standard_error
sx <- sd(leave_modified1$total_paid_leave)
nx <- 38
sy <- sd(leave_modified$total_paid_leave)
ny <- 52
welch_df <- (sx^2/nx + sy^2/ny)^2 / (sx^4/(nx^2*(nx-1)) + sy^4/(ny^2*(ny-1)))
welch_df
critical_value <- qt(.95 + (1-.95)/2, df =  welch_df)
point_estimate + c(-1,1) * critical_value * standard_error
sx <- sd(leave_modified1$total_paid_leave)
nx <- 38
sy <- sd(leave_modified$total_paid_leave)
ny <- 52
test_stat <- ((mean(leave_modified$total_paid_leave)-mean(leave_modified1$total_paid_leave)) - 0)/sqrt(sx^2/nx + sy^2/ny)
test_stat
welch_df <- (sx^2/nx + sy^2/ny)^2 / (sx^4/(nx^2*(nx-1)) + sy^4/(ny^2*(ny-1)))
p_val <- 1 - pt(test_stat, df = welch_df)
p_val
t.test(leave_modified$total_paid_leave, leave_modified1$total_paid_leave, alternative = "greater", conf.level = .95)
sx <- sd(leave_modified1$total_paid_leave)
nx <- 38
sy <- sd(leave_modified$total_paid_leave)
ny <- 52
test_stat <- ((mean(leave_modified1$total_paid_leave)-mean(leave_modified$total_paid_leave)) - 0)/sqrt(sx^2/nx + sy^2/ny)
test_stat
welch_df <- (sx^2/nx + sy^2/ny)^2 / (sx^4/(nx^2*(nx-1)) + sy^4/(ny^2*(ny-1)))
p_val <- pt(test_stat, df = welch_df)
p_val
t.test(leave_modified1$total_paid_leave, leave_modified$total_paid_leave, alternative = "less", conf.level = .95)
leave_modified2 <- leave %>%
filter(Industry == "Technology: Software")
leave_modified2
mean_paternity_leave <- mean(leave_modified2$Paid.Paternity.Leave)
mean_paternity_leave
sx <- sd(leave_modified2$Paid.Paternity.Leave)
nx <- 160
mean_maternity_leave <- mean(leave_modified2$Paid.Maternity.Leave)
mean_maternity_leave
sy <- sd(leave_modified2$Paid.Maternity.Leave)
ny <- 160
se = sqrt(sx^2/nx + sy^2/ny)
test_statistic <- ((mean_paternity_leave - mean_maternity_leave) - 0)/se
test_statistic
welch = (sx^2/nx + sy^2/ny)^2 / (sx^4/(nx^2*(nx-1)) + sy^4/(ny^2*(ny-1)))
welch
pt(test_statistic, df = welch)
t.test(leave_modified2$Paid.Paternity.Leave, leave_modified2$Paid.Maternity.Leave, conf.level = .95)
leave_modified2 <- leave %>%
filter(Industry == "Technology: Software") %>%
mutate(Difference = Paid.Maternity.Leave - Paid.Paternity.Leave)
leave_modified2
mean_paternity_leave <- mean(leave_modified2$Paid.Paternity.Leave)
mean_paternity_leave
sx <- sd(leave_modified2$Paid.Paternity.Leave)
nx <- 160
mean_maternity_leave <- mean(leave_modified2$Paid.Maternity.Leave)
mean_maternity_leave
sy <- sd(leave_modified2$Paid.Maternity.Leave)
ny <- 160
se = sqrt()
leave_modified2 <- leave %>%
filter(Industry == "Technology: Software") %>%
mutate(Difference = Paid.Maternity.Leave - Paid.Paternity.Leave)
leave_modified2
x_bar <- leave_modified2$Difference
se = sqrt()
leave_modified2 <- leave %>%
filter(Industry == "Technology: Software") %>%
mutate(Difference = Paid.Maternity.Leave - Paid.Paternity.Leave)
leave_modified2
xbar <- mean(leave_modified2$Difference)
s = sd(leave_modified2$Difference)
test_statistic <- ((mean_paternity_leave - mean_maternity_leave) - 0)/se
test_statistic
pt(test_statistic, df = welch)
t.test(leave_modified2$Paid.Paternity.Leave, leave_modified2$Paid.Maternity.Leave, conf.level = .95)
leave_modified2 <- leave %>%
filter(Industry == "Technology: Software") %>%
mutate(Difference = Paid.Maternity.Leave - Paid.Paternity.Leave)
leave_modified2
xbar <- mean(leave_modified2$Difference)
s = sd(leave_modified2$Difference)
test_statistic <- ((mean_paternity_leave - mean_maternity_leave) - 0)/(s/sqrt(160))
test_statistic
pt(test_statistic, df = welch)
t.test(leave_modified2$Paid.Paternity.Leave, leave_modified2$Paid.Maternity.Leave, conf.level = .95)
leave_modified2 <- leave %>%
filter(Industry == "Technology: Software") %>%
mutate(Difference = Paid.Maternity.Leave - Paid.Paternity.Leave)
leave_modified2
xbar <- mean(leave_modified2$Difference)
s = sd(leave_modified2$Difference)
test_statistic <- ((mean_paternity_leave - mean_maternity_leave) - 0)/(s/sqrt(160))
test_statistic
pt(test_statistic, df = 160 - 1)
t.test(leave_modified2$Paid.Paternity.Leave, leave_modified2$Paid.Maternity.Leave, conf.level = .95)
leave_modified2 <- leave %>%
filter(Industry == "Technology: Software") %>%
mutate(Difference = Paid.Maternity.Leave - Paid.Paternity.Leave)
leave_modified2
xbar <- mean(leave_modified2$Difference)
s = sd(leave_modified2$Difference)
test_statistic <- ((mean_paternity_leave - mean_maternity_leave) - 0)/(s/sqrt(160))
test_statistic
pt(test_statistic, df = 160 - 1)
leave_modified2 <- leave %>%
filter(Industry == "Technology: Software") %>%
mutate(Difference = Paid.Maternity.Leave - Paid.Paternity.Leave)
leave_modified2
xbar <- mean(leave_modified2$Difference)
s = sd(leave_modified2$Difference)
test_statistic <- ((mean_paternity_leave - mean_maternity_leave) - 0)/(s/sqrt(160))
test_statistic
pt(test_statistic, df = 160 - 1)
t.test(leave_modified2)
leave_modified2 <- leave %>%
filter(Industry == "Technology: Software") %>%
mutate(Difference = Paid.Maternity.Leave - Paid.Paternity.Leave)
leave_modified2
xbar <- mean(leave_modified2$Difference)
s = sd(leave_modified2$Difference)
test_statistic <- ((mean_paternity_leave - mean_maternity_leave) - 0)/(s/sqrt(160))
test_statistic
pt(test_statistic, df = 160 - 1)
t.test(leave_modified2, conf.level = .95)
leave_modified2 <- leave %>%
filter(Industry == "Technology: Software") %>%
mutate(Difference = Paid.Maternity.Leave - Paid.Paternity.Leave)
leave_modified2
xbar <- mean(leave_modified2$Difference)
s = sd(leave_modified2$Difference)
test_statistic <- ((mean_paternity_leave - mean_maternity_leave) - 0)/(s/sqrt(160))
test_statistic
pt(test_statistic, df = 160 - 1)
t.test(leave_modified2$Difference, conf.level = .95)
leave_modified2 <- leave %>%
filter(Industry == "Technology: Software") %>%
mutate(Difference = Paid.Maternity.Leave - Paid.Paternity.Leave)
leave_modified2
xbar <- mean(leave_modified2$Difference)
s = sd(leave_modified2$Difference)
test_statistic <- (xbar - 0)/(s/sqrt(160))
test_statistic
pt(test_statistic, df = 160 - 1)
t.test(leave_modified2$Difference, conf.level = .95)
leave_modified2 <- leave %>%
filter(Industry == "Technology: Software") %>%
mutate(Difference = Paid.Maternity.Leave - Paid.Paternity.Leave)
leave_modified2
xbar <- mean(leave_modified2$Difference)
s = sd(leave_modified2$Difference)
test_statistic <- (xbar - 0)/(s/sqrt(160))
test_statistic
2*pt(test_statistic, df = 160 - 1)
t.test(leave_modified2$Difference, conf.level = .95)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE, error = TRUE,
fig.height = 3)
library(tidyverse)
leave <- read_csv("../../data/parental_leave.csv")
# Remove spaces from column names
names(leave) <- make.names(names(leave))
# Tidy numeric columns
leave <- leave %>%
mutate_at(vars(Paid.Maternity.Leave, Unpaid.Maternity.Leave,
Paid.Paternity.Leave, Unpaid.Paternity.Leave), as.numeric) %>%
replace(is.na(.), 0)
leave
leave_modified <- leave %>%
mutate(total_paid_leave = Paid.Maternity.Leave + Paid.Paternity.Leave) %>%
filter(Industry == "Educational Services: College & Universities")
ggplot(data = leave_modified, mapping = aes(x = total_paid_leave)) +
geom_histogram()
leave_modified # chart for reference
point_estimate <- mean(leave_modified$total_paid_leave)
standard_error <- sd(leave_modified$total_paid_leave)/sqrt(52)
critical_value <- qt(.98 + (1-.98)/2, df = 52 - 1)
point_estimate + c(-1,1) * critical_value * standard_error
mean <- mean(leave_modified$total_paid_leave)
mean
standard_error <- sd(leave_modified$total_paid_leave)/sqrt(52)
standard_error
test_stat = (mean - 10)/(standard_error)
test_stat
p_val <- 1 - pt(test_stat, df = 52-1)
p_val
t.test(leave_modified$total_paid_leave, mu = 10, alternative = "greater", conf.level = .98)
p_val <- 1 - pnorm(test_stat)
p_val
leave_modified1 <- leave %>%
mutate(total_paid_leave = Paid.Maternity.Leave + Paid.Paternity.Leave) %>%
filter(Industry == "Healthcare: Hospitals & Clinics")
leave_modified1
ggplot(data = leave_modified, mapping = aes(x = total_paid_leave)) +
geom_histogram()
point_estimate <- mean(leave_modified$total_paid_leave) - mean(leave_modified1$total_paid_leave)
standard_error <- sqrt(sd(leave_modified1$total_paid_leave)^2/38 + sd(leave_modified$total_paid_leave)^2/52)
standard_error
sx <- sd(leave_modified1$total_paid_leave)
nx <- 38
sy <- sd(leave_modified$total_paid_leave)
ny <- 52
welch_df <- (sx^2/nx + sy^2/ny)^2 / (sx^4/(nx^2*(nx-1)) + sy^4/(ny^2*(ny-1)))
welch_df
critical_value <- qt(.95 + (1-.95)/2, df =  welch_df)
point_estimate + c(-1,1) * critical_value * standard_error
sx <- sd(leave_modified1$total_paid_leave)
nx <- 38
sy <- sd(leave_modified$total_paid_leave)
ny <- 52
test_stat <- ((mean(leave_modified$total_paid_leave)-mean(leave_modified1$total_paid_leave)) - 0)/sqrt(sx^2/nx + sy^2/ny)
test_stat
welch_df <- (sx^2/nx + sy^2/ny)^2 / (sx^4/(nx^2*(nx-1)) + sy^4/(ny^2*(ny-1)))
p_val <- 1 - pt(test_stat, df = welch_df)
p_val
t.test(leave_modified$total_paid_leave, leave_modified1$total_paid_leave, alternative = "greater", conf.level = .95)
sx <- sd(leave_modified1$total_paid_leave)
nx <- 38
sy <- sd(leave_modified$total_paid_leave)
ny <- 52
test_stat <- ((mean(leave_modified1$total_paid_leave)-mean(leave_modified$total_paid_leave)) - 0)/sqrt(sx^2/nx + sy^2/ny)
test_stat
welch_df <- (sx^2/nx + sy^2/ny)^2 / (sx^4/(nx^2*(nx-1)) + sy^4/(ny^2*(ny-1)))
p_val <- pt(test_stat, df = welch_df)
p_val
t.test(leave_modified1$total_paid_leave, leave_modified$total_paid_leave, alternative = "less", conf.level = .95)
leave_modified2 <- leave %>%
filter(Industry == "Technology: Software") %>%
mutate(Difference = Paid.Maternity.Leave - Paid.Paternity.Leave)
leave_modified2
xbar <- mean(leave_modified2$Difference)
s = sd(leave_modified2$Difference)
test_statistic <- (xbar - 0)/(s/sqrt(160))
test_statistic
2*pt(test_statistic, df = 160 - 1)
t.test(leave_modified2$Difference, conf.level = .95)
leave_modified2 <- leave %>%
filter(Industry == "Technology: Software") %>%
mutate(Difference = Paid.Maternity.Leave - Paid.Paternity.Leave)
leave_modified2
xbar <- mean(leave_modified2$Difference)
s = sd(leave_modified2$Difference)
test_statistic <- (xbar - 0)/(s/sqrt(160))
test_statistic
2 * (1 - pt(test_statistic, df = 160 - 1))
t.test(leave_modified2$Difference, conf.level = .95)
knitr::opts_chunk$set(echo = TRUE, message = FALSE,
warning = FALSE, error = TRUE,
fig.height = 3)
library(tidyverse)
iris
iris <- count(Species)
iris %>% count(Species)
setwd("~/Desktop/STAT340/hw/HW01")
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
p_e = .25
p_o = .75
expected_value <- .75*1 + .75*3 + .75*5 + .25*2 + .25*4 + .25*6
expected_value
p_e = .25
p_o = .75
expected_value <- .75*(1+3+5) + .25*(2+4+6)
expected_value
p_e = .25
p_o = .75
expected_value <- .75*((1+3+5)/3) + .25*((2+4+6)/3)
expected_value
p_e = .25
p_o = .75
expected_value <- .25*((1+3+5)/3) + .75*((2+4+6)/3)
expected_value
p_e = .75
p_o = .25
expected_value <- .25*((1+3+5)/3) + .75*((2+4+6)/3)
expected_value
p_e = .75
p_o = .25
expected_value <- .25*((1+3+5)/3) + .75*((2+4+6)/3)
expected_value
possible_combos = 4^3
less_than_6 = 20
less_than_6/possible_combos
setwd("~/Desktop/STAT340/hw/HW01")
(3/4+2/4+1/4+0/4)/4
1/4*1/4*3/4
plot(x=0:6, y=c(0,.2,.3, .5, .8,.9,1), type="s", ylab="F(y)", xlab="y", main="cdf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
y1 = c(0,.2,.3, .5, .8,.9,1) - c(0, 0, .2, .3, .5, .8)
y1 = c(0,.2,.3, .5, .8,.9,1) - c(0, 0, .2, .3, .5, .8)
plot(x=0:6, y=y1, type="s", ylab="F(y)", xlab="y", main="cdf of Y")
y1 = c(0,.2,.3, .5, .8,.9,1) - c(0, 0, .2, .3, .5, .8)
plot(x=0:6, y=y1, type="s", ylab="F(y)", xlab="y", main="pmf of Y")
y1 = c(0,.2,.3, .5, .8,.9,1) - c(0, 0, .2, .3, .5, .8, .9)
plot(x=0:6, y=y1, type="s", ylab="F(y)", xlab="y", main="pmf of Y")
y1 = c(0,.2,.3, .5, .8,.9,1) - c(0, 0, .2, .3, .5, .8, .9)
plot(x=0:6, y=y1, type="s", ylab="F(y)", xlab="y", main="pmf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
y1 = c(0,.2,.3, .5, .8,.9,1) - c(0, 0, .2, .3, .5, .8, .9)
plot(x=0:6, y=y1, type="s", ylab="P(y)", xlab="y", main="pmf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
0+2*.2+3*.1+4*.2+5*.3+6*.1
0+2*.2+3*.1+4*.2+5*.3+6*.1
plot(x=c(0,1,1.00001,2,2.0001,3), y=c(.5,0,.5,.5,0,.5), type="l", ylab="density", xlab="x", main="pdf of X")
1*.5*1/2
.5*.5 + 1/2*.5*.25
.06*500 + .03 * 500
.06 * 500 + .17 * 500
sqrt(500^2*)
.06 * 500 + .17 * 500
.06 * 500 + .17 * 500
500^2*0.03^2+500^22*0.13^2+2*500*500*0.03*0.13*−0.75
.06 * 500 + .17 * 500
500^2*0.03^2+500^22*0.13^2+2*500*500*0.03*0.13*(−0.75)
.06 * 500 + .17 * 500
500^2*0.03^2+500^22*0.13^2+2*500*500*0.03*0.13*(−.75)
.06 * 500 + .17 * 500
500^2*0.03^2+500^22*0.13^2+2*500*500*0.03*0.13*(-.75)
.06 * 500 + .17 * 500
sqrt(500^2*0.03^2+500^22*0.13^2+2*500*500*0.03*0.13*-.75)
.06 * 500 + .17 * 500
sqrt(500^2+0.03^2+500^22*0.13^2+2*500*500*0.03*0.13*-.75)
.06 * 500 + .17 * 500
sqrt(500^2+0.03^2+500^2*0.13^2+2*500*500*0.03*0.13*-.75)
.06 * 500 + .17 * 500
sqrt(500^2*0.03^2+2*500*500*0.03*0.13*-.75+500^2*0.13^2)
.06 * 500 + .17 * 500
sqrt(500^2*0.03^2 +
2*500*500*0.03*0.13*-.75 +
500^2*0.13^2)
.06 * 500 + .17 * 500
sqrt(500^2*0.03^2 +
2*500*500*0.03*0.13*-.75 +
500^2*0.13^2)
setwd("~/Desktop/STAT340/discussion/ds02")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, error = TRUE)
library(tidyverse)
# do not change this code, this chunk defines the running average function and can be specified as cumulative sum / index of element
running_mean <- function(vec) {
cumsum(vec) / seq_along(vec)
}
# do not change this code, this chunk defines the running average function and can be specified as cumulative sum / index of element
running_mean <- function(vec) {
cumsum(vec) / seq_along(vec)
}
running_mean
3!/2!
fact(3)/fact(2)
factorial(3)/factorial(2)
factorial(2)/factorial(3)
4*3*3/64
.06 * 838.266 + .17 * (1000-838.266)
sqrt( 838.266^2*0.03^2 +
2*838.266*(1000-838.266)*0.03*0.13*-.75 +
(1000-838.266)^2*0.13^2 )
0+2*.2+3*.1+4*.2+5*.3+6*.1
0 + 2*.2 + 3*.1 + 4*.3 + 5*.3 + 6*.1
0*0 + 1*0.2 + 2*0.1 + 3*0.2 + 4*0.3 + 5*0.1 + 6*0.1 = 3.3
0*0 + 1*0.2 + 2*0.1 + 3*0.2 + 4*0.3 + 5*0.1 + 6*0.1
plot(x=0:6, y=c(0,.2,.3, .5, .8,.9,1), type="s", ylab="F(y)", xlab="y", main="cdf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
y <- 1:6
py <- c(0.2, 0.1, 0.2, 0.3, 0.1, 0.1) ## edit this line
barplot(height=py, names=y, main="pmf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
y <- 1:6
py <- c(0.2, 0.1, 0.2, 0.3, 0.1, 0.1) ## edit this line
barplot(height=py, names=y, main="pmf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
y1 = c(0,.2,.3, .5, .8,.9,1) - c(0, 0, .2, .3, .5, .8, .9)
plot(x=0:6, y=y1, type="s", ylab="P(y)", xlab="y", main="pmf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
# This vector calculation is preserved as you requested.
# It correctly calculates the PMF probabilities for Y = 0 through 6.
y1 <- c(0,.2,.3, .5, .8,.9,1) - c(0, 0, .2, .3, .5, .8, .9)
# We now use barplot, providing the correct labels for the x-axis
# using the 'names.arg' parameter. This is the critical step to
# ensure the plot matches the data.
barplot(height=y1, names.arg=0:6, ylab="P(y)", xlab="y", main="pmf of Y")
# The abline function can still be added to the barplot.
abline(h=seq(.1,.9,.1), lty=2, col="gray")
y1 = c(0,.2,.3, .5, .8,.9,1) - c(0, 0, .2, .3, .5, .8, .9)
plot(x=0:6, y=y1, type="s", ylab="P(y)", xlab="y", main="pmf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
y1 <- c(0,.2,.3, .5, .8,.9,1) - c(0, 0, .2, .3, .5, .8, .9)
barplot(height=y1, names.arg=0:6, ylab="P(y)", xlab="y", main="pmf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
y <- 1:6
py <- c(0.2, 0.1, 0.2, 0.3, 0.1, 0.1) ## edit this line
barplot(height=py, names=y, main="pmf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
py1 <- c(0,.2,.3, .5, .8,.9,1) - c(0, 0, .2, .3, .5, .8, .9)
barplot(height=py1, names.arg=0:6, ylab="P(y)", xlab="y", main="pmf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
p_e = .75
p_o = .25
expected_value <- .25*((1+3+5)/3) + .75*((2+4+6)/3)
expected_value
possible_combos = 4^3
less_than_6 = 20
less_than_6/possible_combos
(3/4+2/4+1/4+0/4)/4
4*3*3/64
y <- 1:6
py <- c(0.2, 0.1, 0.2, 0.3, 0.1, 0.1) ## edit this line
barplot(height=py, names=y, main="pmf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
py1 <- c(0,.2,.3, .5, .8,.9,1) - c(0, 0, .2, .3, .5, .8, .9)
barplot(height=py1, names.arg=0:6, ylab="P(y)", xlab="y", main="pmf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
0*0 + 1*0.2 + 2*0.1 + 3*0.2 + 4*0.3 + 5*0.1 + 6*0.1
plot(x=c(0,1,1.00001,2,2.0001,3), y=c(.5,0,.5,.5,0,.5), type="l", ylab="density", xlab="x", main="pdf of X")
1*.5*1/2
.5*.5 + 1/2*.5*.25
.06 * 500 + .17 * 500
sqrt( 500^2*0.03^2 +
2*500*500*0.03*0.13*-.75 +
500^2*0.13^2 )
.06 * 838.266 + .17 * (1000-838.266)
sqrt( 838.266^2*0.03^2 +
2*838.266*(1000-838.266)*0.03*0.13*-.75 +
(1000-838.266)^2*0.13^2 )
.06 * 838.266 + .17 * (1000-838.266)
sqrt( 838.266^2*0.03^2 +
2*838.266*(1000-838.266)*0.03*0.13*-.75 +
(1000-838.266)^2*0.13^2 )
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
plot(x=0:6, y=c(0,.2,.3, .5, .8,.9,1), type="s", ylab="F(y)", xlab="y", main="cdf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
y<- 1:6
py <- c(0,0,0,0,0,0) ## edit this line
barplot(height=py, names=y, main="pmf of Y")
plot(x=0:6, y=c(0,.2,.3, .5, .8,.9,1), type="s", ylab="F(y)", xlab="y", main="cdf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
py1 <- c(0,.2,.3, .5, .8,.9,1) - c(0, 0, .2, .3, .5, .8, .9)
barplot(height=py1, names.arg=0:6, ylab="P(y)", xlab="y", main="pmf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
p_e = .75
p_o = .25
expected_value <- .25*((1+3+5)/3) + .75*((2+4+6)/3)
expected_value
possible_combos = 4^3
less_than_6 = 20
less_than_6/possible_combos
(3/4+2/4+1/4+0/4)/4
4*3*3/64
plot(x=0:6, y=c(0,.2,.3, .5, .8,.9,1), type="s", ylab="F(y)", xlab="y", main="cdf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
py1 <- c(0,.2,.3, .5, .8,.9,1) - c(0, 0, .2, .3, .5, .8, .9)
barplot(height=py1, names.arg=0:6, ylab="P(y)", xlab="y", main="pmf of Y")
abline(h=seq(.1,.9,.1), lty=2, col="gray")
0*0 + 1*0.2 + 2*0.1 + 3*0.2 + 4*0.3 + 5*0.1 + 6*0.1
plot(x=c(0,1,1.00001,2,2.0001,3), y=c(.5,0,.5,.5,0,.5), type="l", ylab="density", xlab="x", main="pdf of X")
1*.5*1/2
.5*.5 + 1/2*.5*.25
.06 * 500 + .17 * 500
sqrt( 500^2*0.03^2 +
2*500*500*0.03*0.13*-.75 +
500^2*0.13^2 )
.06 * 838.266 + .17 * (1000-838.266)
sqrt( 838.266^2*0.03^2 +
2*838.266*(1000-838.266)*0.03*0.13*-.75 +
(1000-838.266)^2*0.13^2 )
