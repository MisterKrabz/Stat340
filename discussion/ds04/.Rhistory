setwd("~/Desktop/stat340/discussion/ds04")
### TODO: uncomment the below and complete.
mtcars.small <- data.frame(drat, mpg
?mtcars
### TODO: uncomment the below and complete.
mtcars.small <- data.frame(mtcars$drat, mtcars$mpg)
#TODO: uncomment code below and take note of slope estimate.
#Fist we run lm with mpg regressed on drat,
data=mtcars.small means use columns from this data frame,
#TODO: uncomment code below and take note of slope estimate.
#Fist we run lm with mpg regressed on drat,
data=mtcars.small # means use columns from this data frame,
#then  extract coefficients from model
summary(lm(mpg ~ drat, data=mtcars.small))$coefficients
### TODO: uncomment the below and complete.
mtcars.small <- data.frame(drat = mtcars$drat, mpg = mtcars$mpg)
#TODO: uncomment code below and take note of slope estimate.
#Fist we run lm with mpg regressed on drat,
data=mtcars.small # means use columns from this data frame,
#then  extract coefficients from model
summary(lm(mpg ~ drat, data=mtcars.small))$coefficients
2*(1-pt(5.096042,30))
# Code for extracting the coefficient beta_1
output <- lm( mpg ~ drat, data=mtcars.small) );
#TODO: uncomment code below and take note of slope estimate.
#Fist we run lm with mpg regressed on drat,
data=mtcars.small # means use columns from this data frame,
#then  extract coefficients from model
summary(lm(mpg ~ drat, data=mtcars.small))$coefficients
2*(1-pt(5.096042,30))
# Code for extracting the coefficient beta_1
output <- lm( mpg ~ drat, data=mtcars.small);
output$coefficients[2]
slope <- data.frame()
x_permutations <- runif(n = 1000, min = -999, max = 999)
y_values <- lm(x_permutations)
slope <- data.frame()
x_permutations <- runif(n = 1000, min = -999, max = 999)
y_values <- lm(-7.524618 + 7.678233 * x, x_permutations)
slope <- data.frame()
x_permutations <- runif(n = 1000, min = -999, max = 999)
y_values <- lm(-7.524618 + 7.678233 * x_permutations, x_permutations)
slope <- data.frame()
x_permutations <- runif(n = 1000, min = -999, max = 999)
y_values <- lm( x_permutations, -7.524618 + 7.678233 * x_permutations)
slope <- data.frame()
x_permutations <- runif(n = 1000, min = -999, max = 999)
y_values <- lm(mtcars$drat ~ mtcars$mpg, data = x_permutations)
slope <- data.frame()
x_permutations <- runif(n = 1000, min = -999, max = 999)
x_permutations
y_values <- lm(mtcars$drat ~ mtcars$mpg, data = x_permutations)
slope <- data.frame()
x_permutations <- data.frame(runif(n = 1000, min = -999, max = 999))
x_permutations
y_values <- lm(mtcars$drat ~ mtcars$mpg, data = x_permutations)
slope <- data.frame()
x_permutations <- data.frame(runif(n = 1000, min = -999, max = 999))
y_values <- lm(mtcars$drat ~ mtcars$mpg, data = x_permutations)
slope_mean <- 0
for(i in n-1){
slope_mean = (slope_mean + (x_permutations[0][i] - x_permutations[0][i-1])/(y_values[i] - y_values[i-1]))/i
}
slope <- data.frame()
x_permutations <- data.frame(runif(n = 1000, min = -999, max = 999))
y_values <- lm(mtcars$drat ~ mtcars$mpg, data = x_permutations)
slope_mean <- 0
for(i in 1000-1){
slope_mean = (slope_mean + (x_permutations[0][i.+ 1] - x_permutations[0][i])/(y_values[i + 1] - y_values[i]))/i
}
slope <- data.frame()
x_permutations <- data.frame(runif(n = 1000, min = -999, max = 999))
y_values <- lm(mtcars$drat ~ mtcars$mpg, data = x_permutations)
slope_mean <- 0
i = 0
for(i in 1000-1){
slope_mean = (slope_mean + (x_permutations[0][i.+ 1] - x_permutations[0][i])/(y_values[i + 1] - y_values[i]))/i
}
slope <- data.frame()
x_permutations <- data.frame(runif(n = 1000, min = -999, max = 999))
y_values <- lm(mtcars$drat ~ mtcars$mpg, data = x_permutations)
slope_mean <- 0
i = 0
for(i in 1:(1000-1)){
slope_mean = (slope_mean + (x_permutations[0][i.+ 1] - x_permutations[0][i])/(y_values[i + 1] - y_values[i]))/i
}
### TODO: uncomment the below and complete.
mtcars.small <- data.frame(drat = mtcars$drat, mpg = mtcars$mpg)
#TODO: uncomment code below and take note of slope estimate.
#Fist we run lm with mpg regressed on drat,
data=mtcars.small # means use columns from this data frame,
#then  extract coefficients from model
summary(lm(mpg ~ drat, data=mtcars.small))$coefficients
2*(1-pt(5.096042,30))
# Code for extracting the coefficient beta_1
output <- lm( mpg ~ drat, data=mtcars.small);
output$coefficients[2]
slope <- data.frame()
x_permutations <- data.frame(runif(n = 1000, min = -999, max = 999))
y_values <- lm(mtcars$drat ~ mtcars$mpg, data = x_permutations)
slope_mean <- 0
i = c(int = 1:(1000-1))
for(int in i){
slope_mean = (slope_mean + (x_permutations[0][i.+ 1] - x_permutations[0][i])/(y_values[i + 1] - y_values[i]))/i
}
slope <- data.frame()
x_permutations <- data.frame(runif(n = 1000, min = -999, max = 999))
y_values <- lm(mtcars$drat ~ mtcars$mpg, data = x_permutations)
slope_mean <- 0
i <- c(int = 1:(1000-1))
for(int in i){
slope_mean = (slope_mean + (x_permutations[0][i.+ 1] - x_permutations[0][i])/(y_values[i + 1] - y_values[i]))/i
}
slope <- data.frame()
x_permutations <- data.frame(runif(n = 1000, min = -999, max = 999))
y_values <- lm(mtcars$drat ~ mtcars$mpg, data = x_permutations)
slope_mean <- 0
ints <- c(int = 1:(1000-1))
for(int in ints){
slope_mean = (slope_mean + (x_permutations[0][i.+ 1] - x_permutations[0][i])/(y_values[i + 1] - y_values[i]))/i
}
slope <- data.frame()
x_permutations <- data.frame(runif(n = 1000, min = -999, max = 999))
y_values <- lm(mtcars$drat ~ mtcars$mpg, data = x_permutations)
slope_mean <- 0
ints <- c(int = 1:(1000-1))
for(int in ints){
slope_mean = (slope_mean + (x_permutations[0][i.+ 1] - x_permutations[0][i])/(y_values[i + 1] - y_values[i]))/i
}
slope <- data.frame()
x_permutations <- data.frame(runif(n = 1000, min = -999, max = 999))
y_values <- lm(mtcars$drat ~ mtcars$mpg, data = x_permutations)
slope_mean <- 0
ints <- c(int = 1:(1000-1))
for(int in ints){
slope_mean = (slope_mean + (x_permutations[0][i+ 1] - x_permutations[0][i])/(y_values[i + 1] - y_values[i]))/i
}
slope <- data.frame()
x_permutations <- data.frame(runif(n = 1000, min = -999, max = 999))
y_values <- lm(mtcars$drat ~ mtcars$mpg, data = x_permutations)
slope_mean <- 0
ints <- c(int = 1:(1000-1))
for(int in ints){
slope_mean = (slope_mean + (x_permutations[0][int+ 1] - x_permutations[0][int])/(y_values[int + 1] - y_values[int]))/int
}
