setwd("~/Desktop/stat340/hw/hw04")
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
x <- c()
for(i in 1:10000){
x <- c(mean(rpois(15, lambda = 25))
}
x <- c()
for(i in 1:10000){
x <- c(mean(rpois(15, lambda = 25)))
}
x <- c()
for(i in 1:10000){
x <- c(mean(rpois(15, lambda = 25)))
}
x
x <- c()
for(i in 1:10000){
x <- c(mean(rpois(15, lambda = 25)))
}
x
x <- c()
set.seed(2025)
for(i in 1:10000){
x <- c(mean(rpois(15, lambda = 25)))
}
x
x <- c()
set.seed(2025)
for(i in 1:10000){
x <- c(x, mean(rpois(15, lambda = 25)))
}
x
count = 0
for(i in 10000){
if(x[i] > 25){
count = count + 1;
}
}
count/10000
count = 0
for(i in 1:10000){
if(x[i] >= 25){
count = count + 1;
}
}
count/10000
knitr::opts_chunk$set(echo=T,eval=T,message=F,warning=F,fig.align='center')
library(tidyverse)
count = 0
data <- read.csv("../data/walley_sales.csv")
count = 0
data <- read.csv("../data/wally_sales.csv")
count = 0
data <- read.csv("../data/wally_sales.csv")
count = 0
data <- read.csv("../data/wally_sales.csv")
count = 0
data <- read.csv("./../../data/wally_sales.csv")
for(i in 1:10000){
if(x[i] >= 25){
count = count + 1;
}
}
count/10000
count = 0
data <- read.csv("./../../data/wally_sales.csv")
mean(data)
for(i in 1:10000){
if(x[i] >= 25){
count = count + 1;
}
}
count/10000
count = 0
data <- read.csv("./../../data/wally_sales.csv")
mean(data$sales)
for(i in 1:10000){
if(x[i] >= 25){
count = count + 1;
}
}
count/10000
count = 0
data <- read.csv("./../../data/wally_sales.csv")
for(i in 1:10000){
if(x[i] >= mean(data$sales)){
count = count + 1;
}
}
count/10000
playPingPong <- function(scoreTrigger = 21, winMargin=2, probPlayerA=0.5){
#initialize a score vector to be 0,0
score <- c(0,0)
#repeat while the winning condition has not been reached
#i.e. repeat while max score < 21 or point difference < 2
while(TRUE){
if(max_score < 21 && abs(score[1] - score[2]) < 2){
break;
}
#Assign a point to player 1 or 2 randomly accoriding to
#probPlayerA
}
#return the absolute point difference
return abs(score[1] - score[2])
playPingPong <- function(scoreTrigger = 21, winMargin=2, probPlayerA=0.5){
#initialize a score vector to be 0,0
score <- c(0,0)
#repeat while the winning condition has not been reached
#i.e. repeat while max score < 21 or point difference < 2
while(TRUE){
if(max_score < 21 && abs(score[1] - score[2]) < 2){
break;
}
#Assign a point to player 1 or 2 randomly accoriding to
#probPlayerA
}
#return the absolute point difference
return(abs(score[1] - score[2]))
}
playPingPong <- function(scoreTrigger = 21, winMargin=2, probPlayerA=0.5){
#initialize a score vector to be 0,0
score <- c(0,0)
#repeat while the winning condition has not been reached
#i.e. repeat while max score < 21 or point difference < 2
while(TRUE){
if(max_score > 21 && abs(score[1] - score[2]) > 2){
break;
}
#Assign a point to player 1 or 2 randomly accoriding to
#probPlayerA
score[rbinom(n = 1, size = 1, prob = probPlayerA)] =
score[rbinom(n = 1, size = 1, prob = probPlayerA)] + 1
}
#return the absolute point difference
return(abs(score[1] - score[2]))
}
x = 0
for(i in 10000){
x = x + playPingPong()
}
playPingPong <- function(scoreTrigger = 21, winMargin=2, probPlayerA=0.5){
#initialize a score vector to be 0,0
score <- c(0,0)
#repeat while the winning condition has not been reached
#i.e. repeat while max score < 21 or point difference < 2
while(TRUE){
if(( score[1] > 21 || score[2] > 21) && abs(score[1] - score[2]) > 2){
break;
}
#Assign a point to player 1 or 2 randomly accoriding to
#probPlayerA
score[rbinom(n = 1, size = 1, prob = probPlayerA)] =
score[rbinom(n = 1, size = 1, prob = probPlayerA)] + 1
}
#return the absolute point difference
return(abs(score[1] - score[2]))
}
x = 0
for(i in 10000){
x = x + playPingPong()
}
playPingPong <- function(scoreTrigger = 21, winMargin=2, probPlayerA=0.5){
#initialize a score vector to be 0,0
score <- c(0,0)
#repeat while the winning condition has not been reached
#i.e. repeat while max score < 21 or point difference < 2
while(TRUE){
if(( score[1] > 21 || score[2] > 21) && abs(score[1] - score[2]) > 2){
break;
}
#Assign a point to player 1 or 2 randomly accoriding to
#probPlayerA
score[rbinom(n = 1, size = 1, prob = probPlayerA) + 1] =
score[rbinom(n = 1, size = 1, prob = probPlayerA) + 1] + 1
}
#return the absolute point difference
return(abs(score[1] - score[2]))
}
x = 0
for(i in 10000){
x = x + playPingPong()
}
x / 10000
playPingPong <- function(scoreTrigger = 21, winMargin=2, probPlayerA=0.5){
#initialize a score vector to be 0,0
score <- c(0,0)
#repeat while the winning condition has not been reached
#i.e. repeat while max score < 21 or point difference < 2
while(TRUE){
if(( score[1] >= 21 || score[2] >= 21) && abs(score[1] - score[2]) > 2){
break;
}
#Assign a point to player 1 or 2 randomly accoriding to
#probPlayerA
score[rbinom(n = 1, size = 1, prob = probPlayerA) + 1] =
score[rbinom(n = 1, size = 1, prob = probPlayerA) + 1] + 1
}
#return the absolute point difference
return(abs(score[1] - score[2]))
}
x = 0
for(i in 10000){
x = x + playPingPong()
}
x / 10000
playPingPong <- function(scoreTrigger = 21, winMargin=2, probPlayerA=0.5){
#initialize a score vector to be 0,0
score <- c(0,0)
#repeat while the winning condition has not been reached
#i.e. repeat while max score < 21 or point difference < 2
while(TRUE){
if(( score[1] >= 21 || score[2] >= 21) && abs(score[1] - score[2]) > 2){
break;
}
#Assign a point to player 1 or 2 randomly accoriding to
#probPlayerA
set.seed(2025)
score[rbinom(n = 1, size = 1, prob = probPlayerA) + 1] =
score[rbinom(n = 1, size = 1, prob = probPlayerA) + 1] + 1
}
#return the absolute point difference
return(abs(score[1] - score[2]))
}
x = 0
for(i in 10000){
x = x + playPingPong()
}
x = 0
for(i in 10000){
x = x + playPingPong()
}
x / 10000
playPingPong <- function(scoreTrigger = 21, winMargin=2, probPlayerA=0.5){
#initialize a score vector to be 0,0
score <- c(0,0)
set.seed(2025)
#repeat while the winning condition has not been reached
#i.e. repeat while max score < 21 or point difference < 2
while(TRUE){
if(( score[1] >= 21 || score[2] >= 21) && abs(score[1] - score[2]) > 2){
break;
}
#Assign a point to player 1 or 2 randomly accoriding to
#probPlayerA
a <- rbinom(n = 1, size = 1, prob = probPlayerA) + 1
score[a] = score[a] + 1
}
#return the absolute point difference
return(abs(score[1] - score[2]))
}
x = 0
for(i in 10000){
x = x + playPingPong()
}
x / 10000
playPingPong <- function(scoreTrigger = 21, winMargin=2, probPlayerA=0.5){
#initialize a score vector to be 0,0
score <- c(0,0)
#repeat while the winning condition has not been reached
#i.e. repeat while max score < 21 or point difference < 2
while(TRUE){
if(( score[1] >= 21 || score[2] >= 21) && abs(score[1] - score[2]) >= 2){
break;
}
#Assign a point to player 1 or 2 randomly accoriding to
#probPlayerA
a <- rbinom(n = 1, size = 1, prob = probPlayerA) + 1
score[a] = score[a] + 1
}
#return the absolute point difference
return(abs(score[1] - score[2]))
}
x = 0
for(i in 10000){
x = x + playPingPong()
}
x / 10000
x = 0
for(i in 10000){
x = x + playPingPong()
}
x / 10000
x = 0
for(i in 10000){
x = x + playPingPong()
}
x / 10000
x = 0
for(i in 10000){
x = x + playPingPong()
}
x / 10000
x = 0
for(i in 10000){
x = x + playPingPong()
}
x / 10000
x = 0
set.seed(2025)
for(i in 10000){
x = x + playPingPong()
}
x / 10000
x = 0
set.seed(2025)
for(i in 10000){
x = x + playPingPong()
}
x / 10000
x = 0
set.seed(2025)
for(i in 10000){
x = x + playPingPong()
}
x / 10000
x = 0
set.seed(2025)
for(i in 1:10000){
x = x + playPingPong()
}
x / 10000
x = 0
set.seed(2025)
for(i in 1:10000){
if(playPingPong() >= 6){
x = x + 1
}
}
x / 10000
